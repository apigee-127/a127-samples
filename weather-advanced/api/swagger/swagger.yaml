swagger: "2.0"
info:
  version: "0.0.1"
  title: Advanced OpenWeatherMap API Example with Volos.js OAuth2, Caching, Quota and Analytics
host: localhost
basePath: / 
schemes:
# remove http before deploying to production
  - http  
  - https
consumes:
  - application/json
  - application/x-www-form-urlencoded
produces:
  - application/json
x-a127-config:
  apigeeProxyKey: &apigeeProxyKey CONFIGURED
  apigeeProxyUri: &apigeeProxyUri CONFIGURED
  organization: &organization CONFIGURED
  username: &username CONFIGURED
  password: &password CONFIGURED
x-a127-services:
  spikeArrest:
    provider: "volos-spikearrest-memory"
    options:
      timeUnit: "minute"
      bufferSize: 10
      allow: 10
  analytics:
    provider: volos-analytics-apigee
    options:
      key: *apigeeProxyKey
      uri: *apigeeProxyUri
      proxy: remoteWeatherProxy
      bufferSize: 1000
      flushInterval: 2000
      batchSize: 100
  cache:
    provider: volos-cache-memory
    options:
      name: name
      ttl: 5000
  quota:
    provider: volos-quota-memory
    options:
      timeUnit: minute
      interval: 1
      allow: 2
  management:
    provider: volos-management-apigee
    options:
      organization: *organization
      user: *username
      password: *password
  oauth2:
    provider: volos-oauth-apigee
    options:
      tokenLifetime: 300000
      key: *apigeeProxyKey
      uri: *apigeeProxyUri
      validGrantTypes:
        - client_credentials
        - authorization_code
        - implicit_grant
        - password
      passwordCheck:
        helper: volos
        function: passwordCheck
      tokenPaths:  # These will be added to your paths section for you
        authorize: /authorize
        token: /accesstoken
        invalidate: /invalidate
        refresh: /refresh
paths:
  /weather:
    x-a127-apply:
      analytics: {}
      spikeArrest:
        key:
          helper: volos
          function: clientIp
    x-swagger-router-controller: weather
    get:
      description: Returns current weather in the specified city to the caller
      operationId: getWeatherByCity
      parameters:
        - name: city
          in: query
          description: The city you want weather for in the form [city,state,country]
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema: 
            $ref: WeatherResponse
        default:
          description: Error
          schema:
            $ref: ErrorResponse
  /weather_quota:
    x-swagger-router-controller: weather
    x-a127-apply:
      analytics: {}
      quota: 
        key:
          helper: volos
          function: quotaHelper
    get:
      description: Returns current weather in the specified city to the caller
      operationId: getWeatherByCity
      parameters:
        - name: city
          in: query
          description: The city you want weather for in the form [city,state,country]
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema: 
            $ref: WeatherResponse
        default:
          description: Error
          schema:
            $ref: ErrorResponse
  /weather_cached:
    x-swagger-router-controller: weather
    x-a127-apply:
      analytics: {}
      cache: 
        key:
          helper: volos
          function: cacheKey
    get:
      description: Returns current weather in the specified city to the caller
      operationId: getWeatherByCity
      parameters:
        - name: city
          in: query
          description: The city you want weather for in the form [city,state,country]
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema: 
            $ref: WeatherResponse
        default:
          description: Error
          schema:
            $ref: ErrorResponse
  /weather_secure:
    x-swagger-router-controller: weather
    x-a127-authorizations:
      oauth2: {}
    get:
      description: Returns current weather in the specified city to the caller
      operationId: getWeatherByCity
      parameters:
        - name: city
          in: query
          description: The city you want weather for in the form [city,state,country]
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema: 
            $ref: WeatherResponse
        default:
          description: Error
          schema:
            $ref: ErrorResponse
definitions:
  WeatherItem:
    type: object
    properties: 
      description: 
        type: string
      icon: 
        type: string
      id: 
        type: number
      main: 
        type: string
  WeatherResponse:
    properties: 
      base: 
        type: string
      clouds: 
        type: object
        properties: 
          all: 
            type: number
      cod: 
        type: number
      coord: 
        type: object
        properties: 
          lat: 
            type: number
          lon: 
            type: number
      dt: 
        type: number
      id: 
        type: number
      main: 
        type: object
        properties: 
          humidity: 
            type: number
          pressure: 
            type: number
          temp_max: 
            type: number
          temp_min: 
            type: number
          temp: 
            type: number
      name: 
        type: string
      sys: 
        type: object
        properties: 
          country: 
            type: string
          id: 
            type: number
          message: 
            type: number
          sunrise: 
            type: number
          sunset: 
            type: number
          type: 
            type: number
      weather: 
        type: array
        items: 
          $ref: WeatherItem
      wind: 
        type: object
        properties: 
          deg: 
            type: number
          speed: 
            type: number
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
