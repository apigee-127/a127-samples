swagger: "2.0"
info:
  version: "0.0.1"
  title: "OAuth 2.0 scope example using the Basic OpenWeatherMap API"
host: "localhost"
basePath: "/" 
schemes:
  - "http"
  - "https"
consumes:
  - "application/json"
  - "application/x-www-form-urlencoded"
produces:
  - "application/json"
x-a127-config:
  apigeeProxyKey: &apigeeProxyKey CONFIGURED
  apigeeProxyUri: &apigeeProxyUri CONFIGURED
  organization: &organization CONFIGURED
x-volos-resources:
  oauth2:
    provider: "volos-oauth-apigee"
    options:
      key: *apigeeProxyKey
      uri: *apigeeProxyUri
      tokenLifetime: 30000000
      passwordCheck:
        helper: volos
        function: passwordCheck
      validGrantTypes:
        - password 
        - implicit_grant
        - authorization_code
        - client_credentials
      tokenPaths:  # These will be added to your paths section for you
        token: /accesstoken
        invalidate: /invalidate
        refresh: /refresh
        authorize: /authorize
paths:
  /weather:
    x-swagger-router-controller: weather
    x-volos-authorizations:
        oauth2: {}
    get:
      description: "Returns current weather in the specified city to the caller"
      operationId: getWeatherByCity
      parameters:
        - name: city
          in: query
          description: "The city you want weather for in the form city,state,country"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: WeatherResponse
        default:
          description: "Error"
          schema:
            $ref: ErrorResponse
  /weather_r:
    x-swagger-router-controller: weather
    x-volos-authorizations:
        oauth2: 
          scope: 'READ'
    get:
      description: "Returns current weather in the specified city to the caller"
      operationId: getWeatherByCity
      parameters:
        - name: city
          in: query
          description: "The city you want weather for in the form city,state,country"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema: 
            $ref: WeatherResponse
        default:
          description: "Error"
          schema:
            $ref: ErrorResponse
  /weather_rw:
    x-swagger-router-controller: weather
    x-volos-authorizations:
        oauth2:
          scope: 'READ WRITE'
    get:
      description: "Returns current weather in the specified city to the caller"
      operationId: getWeatherByCity
      parameters:
        - name: city
          in: query
          description: "The city you want weather for in the form city,state,country"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: WeatherResponse
        default:
          description: "Error"
          schema:
            $ref: ErrorResponse
  /weather_rwd:
    x-swagger-router-controller: weather
    x-volos-authorizations:
        oauth2:
          scope: 'READ WRITE DELETE'
    get:
      description: "Returns current weather in the specified city to the caller"
      operationId: getWeatherByCity
      parameters:
        - name: city
          in: query
          description: "The city you want weather for in the form city,state,country"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: WeatherResponse
        default:
          description: "Error"
          schema:
            $ref: ErrorResponse
  /weather_bogus:
    x-swagger-router-controller: weather
    x-volos-authorizations:
        oauth2:
          scope: 'BOGUS'
    get:
      description: "Returns current weather in the specified city to the caller"
      operationId: getWeatherByCity
      parameters:
        - name: city
          in: query
          description: "The city you want weather for in the form city,state,country"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: WeatherResponse
        default:
          description: "Error"
          schema:
            $ref: ErrorResponse
definitions:
  WeatherResponse:
    properties: 
      base: 
        type: "string"
      clouds: 
        type: "object"
        properties: 
          all: 
            type: "number"
      cod: 
        type: "number"
      coord: 
        type: "object"
        properties: 
          lat: 
            type: "number"
          lon: 
            type: "number"
      dt: 
        type: "number"
      id: 
        type: "number"
      main: 
        type: "object"
        properties: 
          humidity: 
            type: "number"
          pressure: 
            type: "number"
          temp_max: 
            type: "number"
          temp_min: 
            type: "number"
          temp: 
            type: "number"
      name: 
        type: "string"
      sys: 
        type: "object"
        properties: 
          country: 
            type: "string"
          id: 
            type: "number"
          message: 
            type: "number"
          sunrise: 
            type: "number"
          sunset: 
            type: "number"
          type: 
            type: "number"
      wind: 
        type: "object"
        properties: 
          deg: 
            type: "number"
          speed: 
            type: "number"
  ErrorResponse:
    required:
      - "message"
    properties:
      message:
        type: "string"
